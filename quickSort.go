package main

//クイックソート
//適当な基準値を選び,それより小さな値のグループと大きな値のグループにデータ分割
//分割統治法
//最悪実行時間はn^2で、平均行時間はnlgn
//ソート済みの配列などに行うと実行時間は最悪
func QuickSort(a []int) {
	quicksort(a, 0, len(a)-1) // 配列の先頭と最後尾を範囲に指定
	return
}

func quicksort(a []int, p, r int) {
	if p < r { // 開始地点よりも終了地点の方が大きいとき
		pivot := partition(a, p, r) // 最後尾の値をピボットにして仕切りとなるインデックス値を求める
		quicksort(a, p, pivot-1)    // 仕切りより前の範囲でクイックソート
		quicksort(a, pivot+1, r)    // 仕切りより後の範囲でクイックソート
	}
}

// 最後尾を基準として仕切りの場所を定める
func partition(a []int, p, r int) int {
	var tmp int              // 値入れ替え用バッファ
	x := a[r]                // 最後尾をピボットにする
	i := p - 1               // 仕切りより前の範囲の最後尾を示すインデックス値
	for j := p; r > j; j++ { // jによってピボットとしている最後尾rの前までピボットとの大小を比較する
		if a[j] <= x { // ピボット以下であるとき仕切りとなるインデックス値を一つ増やしてそこに値を差し込む
			i++        // 仕切りを一つ分動かす
			tmp = a[i] // jにあった値を仕切り内部の最後尾と入れ替え
			a[i] = a[j]
			a[j] = tmp
		}
	}
	i++        // 全て判定を終えたら仕切り内部の最後尾を指したiを一つ動かし仕切りの場所を決定する
	tmp = a[i] // 仕切りの場所にピボットを配置
	a[i] = a[r]
	a[r] = tmp
	return i // 仕切りの場所を返す
}
